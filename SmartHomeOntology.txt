============================================================================
;;                  SmartHome Ontology
;; ============================================================================
;; Created by: Valeria de Paiva (vdepaiva [at] gmail [dot] com)
;; Created on: Sept 8, 2019
;; ============================
;; 
;; Description:  This describes concepts related to smart devices in a connected SmartHome.
;; We pay special attention to devices in OCF (the Open Connectivity Foundation) especially the ones in
;; https://openconnectivity.org/foundation/faq/smarthome-faq and the SmartThings framework described in
;; https://smartthings.developer.samsung.com/docs/devices/working-with-bixby.html.
;; The goal is to deal with all the devices/capabilities in the OCF, Open Connectiviy Foundation
;; https://openconnectivity.org/developer/specifications starting from the SmartThings devices controlled via voice.
;; 
;; Ontology dependencies for SmartHomeOntology.kif: 
;; Merge.kif
;; Mid-level-ontology.kif,  
;; Media.kif
;; QoS.kif  

;; People using or referencing this work please cite the primary paper:
;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
;; Proceedings of the 2nd International Conference on Formal Ontology in 
;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
;; Ogunquit, Maine, October 17-19, 2001.  
;; See also http://www.ontologyportal.org

;; ================================
;; Outline
;; --------------------------------
;; Devices
;; Sensors
;; Capabilities
;; Commands
;; Attributes, Values
;; ================================
;;---------------------------------------------------------------------
;; Devices
;;---------------------------------------------------------------------

;; These are, initially the smart devices mentioned as working with voice:
;; (smart) Air conditioner
;;	(smart) Air Purifier
;;	(smart) Washer
;;	Robot vacuum cleaner
;;	(smart) Speaker
;;	(smart) TV
;;	(smart) Door lock
;;	(smart) Light
;;	Motion sensor
;;	Multi-functional sensor
;;	Open and close sensor
;;	(smart) Outlet
;;	Switch and Dimmer
;;	(smart) Thermostat
;;	(smart) Valve
;;	(smart) Vent

;; A fuller list can be found in https://github.com/Samsung/SmartThings/blob/master/internal/rules/device_type_table.md (50 devices)
;; Devices that are already concepts in SUMO are repeated here, but commented out.

;;=============================
;; First  devices
;; A Device is an Artifact whose purpose is to serve as an instrument in a specific subclass of Process.
;; (subclass Device Artifact)
;; then electric devices
;; (documentation ElectricDevice EnglishLanguage "A Device that uses Electricity as its primary power source.")
;; (subclass ElectricDevice Device)

;; ElectronicDevice proposed
(subclass ElectronicDevice ElectricDevice)
(documentation ElectronicDevice EnglishLanguage "An electric Device where the main functionality is provided by electronic circuits.")

;; SmartDevice  proposed
(subclass SmartDevice ElectricDevice)
(subclass SmartDevice ElectronicDevice)
(documentation SmartDevice EnglishLanguage 
"A SmartDevice is a type of ElectronicDevice, generally connected to other devices or networks via different wireless protocols, that can operate to some extent interactively and autonomously.") 
;;(documentation SmartDevice EnglishLanguage "An electronic device where the control is provided via wifi.")??

;; 1. Air conditioner 
;; (subclass AirConditioner ElectricDevice)
;; (documentation AirConditioner EnglishLanguage "AirConditioner is a type of ElectricDevice that is designed 
;; to provide comfort during hot or cold weather by keeping the air in an area at a specific temperature")

;; SmartAirConditioner proposed
 (subclass SmartAirConditioner AirConditioner)
 (subclass SmartAirConditioner SmartDevice)
 (documentation SmartAirConditioner EnglishLanguage "SmartAirConditioner is a type of AirConditioner that is designed to be     controlled via your smartphone over wifi")

;; 2. Air Purifier  proposed
(subclass AirPurifier ElectricDevice)
;; air purifier (Q1196206) wikidata
(documentation AirPurifier EnglishLanguage 
"AirPurifier is a type of ElectricDevice that is designed to  remove contaminants from the air in a room to improve indoor air quality.")
(subclass SmartAirPurifier SmartDevice)
(documentation SmartAirPurifier EnglishLanguage 
"SmartAirPurifier is a type of AirPurifier that is designed to be controlled via a smartphone.")
(subclass SmartAirPurifier AirPurifier)

;; 3. proposed smartSpeaker 
(subclass SmartSpeaker SpeakerDevice)
(documentation SmartSpeaker EnglishLanguage 
"SmartSpeaker is a type of LoudSpeaker that is designed to  be controlled by voice.")
(subclass SmartSpeaker SmartDevice)

;; 4. SmartTV proposed
(subclass SmartTV TelevisionSet)
(subclass SmartTV SmartDevice)

;; 	Mid-level-ontology.kif 22993-22993 	Mobile cell phone is a subclass of receiver device
;; (subclass MobileCellPhone Telephone)
(subclass  SmartCellPhone MobileCellPhone)
(subclass  SmartCellPhone SmartDevice)

;; 5. SmartRefrigerator proposed
;; (subclass Refrigerator MajorAppliance)
;; (subclass Refrigerator ElectricDevice)
(subclass  SmartRefrigerator SmartDevice)

;; 6. robot vacuum cleaner proposed
(subclass VacuumCleaner ElectricDevice) %missing right now?
(subclass RobotVacuumCleaner SmartDevice)

;;7. smart lights proposed
;; (documentation LightFixture EnglishLanguage "Any Device whose purpose is to be a source of visible light.") 	
;;( subclass LightFixture Device)
;; (subclass ElectricLightFixture LightFixture)
(subclass SmartLight LightFixture)
(subclass SmartLight SmartDevice)

;; Sensors seem to be only ComputerSensors in SUMO at the moment
;; documentation Sensor EnglishLanguage "Sensors include software that measures any attribute of executing computer programs or collections of executing programs, such as CPU utilization, aka load, memory utilization, I/ O, overall task performance, network load and latency, etc.")
;; (subclass Sensor ComputerHardware)
;; need to redefine this as ComputerSensor and have a more generic notion of Sensor to  have at least the following

;; (subclass Accelerometer Sensor)  
(subclass MotionSensor Sensor)
(subclass MoistureSensor Sensor)
(subclass SmokeSensor Sensor)
(subclass OpenCloseSensor Sensor)
(subclass AirQualitySensor Sensor)
(subclass DustSensor Sensor)
;; brightness sensor? volume sensor?
;;===========================================================
;; Other Smart Devices

;; (subclass ClothesWashingMachine MajorAppliance) 	 	
(subclass SmartWashingMachine ClothesWashingMachine)
(subclass SmartWashingMachine SmartDevice)

(subclass SmartDoorLock DoorLock)
;; (documentation Lock EnglishLanguage "A Device, which, through a Key or a combination prevents access to a Container or StationaryArtifact.")
;; (subclass Lock SecurityDevice)
(subclass DoorLock Lock)
(subclass SmartDoorLock SmartDevice)
(documentation SmartDoorLock EnglishLanguage "A DoorLock, which, through wifi allows or prevents access via a Door to a Container or StationaryArtifact.")
;;  	
;; (subclass Door Device)

;; (documentation ElectricalOutlet EnglishLanguage "ElectricalOutlet refers to a Device that is used to connect a plug to a power source so that Electricity can flow from the source to an ElectricDevice") 		
(subclass ElectricalOutlet ElectricDevice)
(subclass smartOutlet ElectricalOutlet)
(subclass smartOutlet SmartDevice)

;;(documentation SwitchDevice EnglishLanguage "An EngineeringComponent which is capable of turning an ElectricDevice on and off.")
;;(subclass SwitchDevice EngineeringComponent)
(subclass SwitchDevice ElectricDevice)
(subclass SmartSwitch SwitchDevice)

;; valve 
;; 	(subclass Valve FluidPowerDevice) 		Valve is a subclass of fluid power device
;;  (subclass Valve MechanicalDevice)
(subclass SmartValve Valve) ;; mechanical device controlled by wirelees?


;; a dimmer is simply
;; 103199488 a rheostat that varies the current through an electric light in order to control the level of illumination.
;; wikipedia: Dimmers are devices connected to a light fixture and used to lower the brightness of light.
;; SUMO Mappings: Device (subsuming mapping) too generic
;; a thermostat
;; PWN: 104422875 a regulator for automatically regulating temperature by starting or stopping the supply of heat.
;; wikipedia: A thermostat is a device which senses the temperature of a physical system and performs actions so that the system's temperature is maintained near a desired setpoint.
;; SUMO Mappings: MeasuringDevice (subsuming mapping) (at the moment only Device)
;; vent seems to be
;; 104526241 a hole for the escape of gas or air.
;; SUMO Mappings: Hole (subsuming mapping) 
;; 
;;=================================================
;; It is harder to decide what to do  about commands,  actions, capabilities, attributes, values, etc.

;; SmartThings are organized in terms of capabilities, which consist of commands and properties or attributes.
;; SmartThings devices have capabilities described in https://smartthings.developer.samsung.com/docs/api-ref/capabilities.html
;; An application interacts with devices based on their capabilities, so once we understand the capabilities that are needed ;; by a SmartApp, and the capabilities that are provided by a device, we can understand which devices (based on the Device’s ;; declared capabilities) are eligible for use within a specific SmartApp.
;; There are 74 capabilities described in the documentation, out of which 42 are live and 32  proposed. 
;; These can be very low level.  

;; By contrast OCF processes which are geared towards interconnectivity, seem much more restricted in numbers. 
;; Only 5: Create, Retrieve, Update, Delete, Notify.
;; https://openconnectivity.org/foundation/faq/smarthome-faq says:
;; IoT Smart Home is an ecosystem made up of device-to-device or device-to-service interactions where-in devices generate information, share it and take actions based on the information. The devices and services essentially speak the same language and give and receive instructions. For example, a smart security system motion detector, 
;; when it senses movement could trigger the smart lighting to turn on the light in the room or thermostat 
;; to adjust the climate controls.device.

;; Smart home devices (e.g., laundry machines, thermostats and security systems) should be able to communicate with one another regardless of manufacturer, operating system, chipset or physical transport.  The OCF Smart Home Project is creating common data modeling for secure interoperability. The Project utilizes OCF technology to specify how Smart Home devices interoperate.
;; page 20 of the long doc (https://openconnectivity.org/specs/OCF_Core_Specification_v2.0.5.pdf) says:
Conformant to  the  REST  architectural  style,  each  RESTful operation contains  all  the  information  necessary  to  understand the context of the interaction and is driven using a small set of generic operations , i.e., CREATE, RETRIEVE, UPDATE, DELETE and NOTIFY (CRUDN) defined in  clause 8, which include representations of Resources .
;; Consumers want choice, and this requires smart home devices to be platform agnostic and communicate with one another regardless of manufacturer.
;;========================
;; SMARTTHINGS CAPABILITIES 
;; first for the 7 device types:tv, family-hub, speaker, AC, purifier, vacuum-cleaner and lights
;; from https://smartthings.developer.samsung.com/docs/api-ref/capabilities.html#Capabilities
 
;; Ligths
;;=========================
;; 1. switch https://smartthings.developer.samsung.com/docs/api-ref/capabilities.html#Switch
Attributes: switch
A string representation of whether the switch is on or off
*Type: *ENUM *Required: *Yes
Possible values:
off - The value of the switch attribute if the switch is off
on - The value of the switch attribute if the switch is on
Commands
off()
Turn a switch off
on()
Turn a switch on
;; 2. switch level
attributes: level
A number that represents the current level, usually 0-100 in percent
*Type: *NUMBER *Required: *Yes
Commands
setLevel(level, rate)
Set the level to the given value. If the device supports being turned on and off then it will be turned on if level is greater than 0 and turned off if level is equal to 0.
Arguments:
level
Type: NUMBER
Required: Yes
Description: The level value, usually 0-100 in percent
rate
Type: NUMBER
Required: No
Description: The rate at which to change the level
    enumCommands:
      - command: 'on'
        value: 'on'
      - command: 'off'
        value: 'off'
commands:
  'off':
    arguments: [
      ]
  'on':
    arguments: [
      ]
public: true
id: light
version: 1
;; 3. light (old capability, described as deprecated in https://docs.smartthings.com/en/latest/capabilities-reference.html#light)
# reviewed 2018-01-11
name: Light
status: deprecated
attributes:
  switch:
    schema:
      type: object
      properties:
        value:
          $ref: SwitchState
      required: ["value"]
    type: ENUM
    values:
      - 'off'
      - 'on'
;;4. actuator https://docs.smartthings.com/en/latest/capabilities-reference.html#actuator
;; The Actuator capability is a “tagging” capability. It defines no attributes or commands. In SmartThings terms, it represents that a Device has commands.
name: Actuator
status: deprecated
attributes: {
  }
commands: {
  }
public: true
id: actuator
version: 1
;;5. configuration https://docs.smartthings.com/en/latest/capabilities-reference.html#configuration
;;Allow configuration of devices that support it
# reviewed 2018-02-20
name: Configuration
status: live
attributes: {
  }
commands:
  configure:
    arguments: [
      ]
public: true
id: configuration
;; 6. refresh https://docs.smartthings.com/en/latest/capabilities-reference.html#refresh
;;Allow the execution of the refresh command for devices that support it
# reviewed 2018-2-13
name: Refresh
status: live
attributes: {
  }
commands:
  refresh:
    arguments: [
      ]
public: true
id: refresh
version: 1
;; 7. healthCheck ???
;; CANNOT FIND!

;; AIR CONDITIONER
;;=====================
;; https://smartthings.developer.samsung.com/docs/api-ref/capabilities.html#Air-Conditioner-Mode
;; seems not to be implmented. instead we have capabilities
;; 1. temperatureMeasurement  
;; from https://smartthings.developer.samsung.com/docs/api-ref/capabilities.html#Temperature-Measurement
;; Note that the following is missing the units which can be F or C
Attributes
temperature
A number that usually represents the current temperature (plus its unit)
*Type: *NUMBER *Required: *Yes
Commands
None.
2. switch 9as above)
3. switch level (as above)
4. powerMeter 
Attributes
power
A number representing the current power consumption. Check the device documentation for how this value is reported
*Type: *NUMBER *Required: *Yes
Commands
None.

NOW for the actual working of the airconditioner we have a capability called "thermostat"

5. thermostat from https://docs.smartthings.com/en/latest/capabilities-reference.html#thermostat
This is DEPRECATED!!! and very long, containing other capabilities.

# reviewed 2018-01-30
name: Thermostat
status: deprecated
attributes:
  coolingSetpoint:
    schema:
      $ref: Temperature
    type: NUMBER
    setter: setCoolingSetpoint
  coolingSetpointRange:
    schema:
      type: object
      properties:
        value:
          type: array
          items:
            -  $ref: TemperatureValue
            -  $ref: TemperatureValue
          minItems: 2
          maxItems: 2
      required:
        - value
    type: VECTOR3
  heatingSetpoint:
    schema:
      $ref: Temperature
    type: NUMBER
    setter: setHeatingSetpoint
  heatingSetpointRange:
    schema:
      type: object
      properties:
        value:
          type: array
          items:
            -  $ref: TemperatureValue
            -  $ref: TemperatureValue
          minItems: 2
          maxItems: 2
      required:
        - value
    type: VECTOR3
  schedule:
    schema:
       type: object
       properties:
         value:
           $ref: JsonObject
       required:
         - value
    type: JSON_OBJECT
    setter: setSchedule
  temperature:
    schema:
      $ref: Temperature
    type: NUMBER
  thermostatFanMode:
    schema:
      type: object
      properties:
        value:
          $ref: ThermostatFanMode
      required:
        - value
    type: ENUM
    values:
      - auto
      - circulate
      - followschedule
      - 'on'
    setter: setThermostatFanMode
    enumCommands:
      - command: fanAuto
        value: auto
      - command: fanCirculate
        value: circulate
      - command: fanOn
        value: 'on'
  supportedThermostatFanModes:
    schema:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: ThermostatFanMode
    type: JSON_OBJECT
  thermostatMode:
    schema:
      type: object
      properties:
        value:
          $ref: ThermostatMode
      required:
        - value
    type: ENUM
    values:
      - auto
      - eco
      - rush hour
      - cool
      - emergency heat
      - heat
      - 'off'
    setter: setThermostatMode
    enumCommands:
      - command: auto
        value: auto
      - command: cool
        value: cool
      - command: emergencyHeat
        value: emergency heat
      - command: heat
        value: heat
      - command: 'off'
        value: 'off'
  supportedThermostatModes:
    schema:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: ThermostatMode
    type: JSON_OBJECT
  thermostatOperatingState:
    schema:
      type: object
      properties:
        value:
          $ref: ThermostatOperatingState
      required:
        - value
    type: ENUM
    values:
      - cooling
      - fan only
      - heating
      - idle
      - pending cool
      - pending heat
      - vent economizer
  thermostatSetpoint:
    schema:
      $ref: Temperature
    type: NUMBER
  thermostatSetpointRange:
    schema:
      type: object
      properties:
        value:
          type: array
          items:
            -  $ref: TemperatureValue
            -  $ref: TemperatureValue
          minItems: 2
          maxItems: 2
    type: VECTOR3
commands:
  auto:
    arguments: [
      ]
  cool:
    arguments: [
      ]
  emergencyHeat:
    arguments: [
      ]
  fanAuto:
    arguments: [
      ]
  fanCirculate:
    arguments: [
      ]
  fanOn:
    arguments: [
      ]
  heat:
    arguments: [
      ]
  'off':
    arguments: [
      ]
  setCoolingSetpoint:
    arguments:
    - name: setpoint
      required: true
      schema:
        $ref: TemperatureValue
      type: NUMBER
  setHeatingSetpoint:
    arguments:
    - name: setpoint
      required: true
      schema:
        $ref: TemperatureValue
      type: NUMBER
  setSchedule:
    arguments:
    - name: schedule
      required: true
      schema:
        $ref: JsonObject
      type: JSON_OBJECT
  setThermostatFanMode:
    arguments:
    - name: fanmode
      required: true
      schema:
        $ref: ThermostatFanMode
      type: ENUM
      values:
        - auto
        - circulate
        - followschedule
        - 'on'
  setThermostatMode:
    arguments:
    - name: mode
      required: true
      schema:
        $ref: ThermostatMode
      type: ENUM
      values:
        - auto
        - eco
        - rush hour
        - cool
        - emergency heat
        - heat
        - 'off'
public: true
id: thermostat
version: 1


MAYBE they mean instead: https://docs.smartthings.com/en/latest/capabilities-reference.html#thermostat-mode
which says it's LIVE

# reviewed 2018-01-30
name: Thermostat Mode
status: live
attributes:
  thermostatMode:
    schema:
      type: object
      properties:
        value:
          $ref: ThermostatMode
      required:
        - value
    type: ENUM
    values:
      - auto
      - eco
      - rush hour
      - cool
      - emergency heat
      - heat
      - 'off'
    setter: setThermostatMode
    enumCommands:
      - command: auto
        value: auto
      - command: cool
        value: cool
      - command: emergencyHeat
        value: emergency heat
      - command: heat
        value: heat
      - command: 'off'
        value: 'off'
  supportedThermostatModes:
    schema:
      type: object
      properties:
        value:
          type: array
          items:
            $ref: ThermostatMode
    type: JSON_OBJECT
commands:
  auto:
    arguments: [
      ]
  cool:
    arguments: [
      ]
  emergencyHeat:
    arguments: [
      ]
  heat:
    arguments: [
      ]
  'off':
    arguments: [
      ]
  setThermostatMode:
    arguments:
    - name: mode
      required: true
      schema:
        $ref: ThermostatMode
      type: ENUM
      values:
        - auto
        - eco
        - rush hour
        - cool
        - emergency heat
        - heat
        - 'off'
public: true
id: thermostatMode
ocfResourceType: x.com.st.mode.thermostat
version: 1
